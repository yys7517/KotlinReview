//// 스코프(scope) - '범위'라는 뜻으로 멤버들의 가용 범위를 의미
//
//val a = "패키지 스코프"
//
//class B() {
//
//    // 하위 스코프에서는 같은 이름의 멤버를 만들어 사용할 수 있다.
//    // val a = "클래스 스코프"
//
//    fun print() {
//        println(a)
//    }
//}
//
//fun main() {
//
//    B().print()     // 패키지 스코프
//    println(a)      // 패키지 스코프
//
//    // 하위 스코프에서는 같은 이름의 멤버를 만들어 사용할 수 있다.
//    // val a = "함수 스코프"
//    // B().print()     // 클래스 스코프 , '.' 은 참조연산자
//    // println(a)      // 함수 스코프
//}
//
///*
//    접근 제한자 => 스코프 외부에서 스코프 내부에 접근할 때, 권한을 개발자가 제어할 수 있는 기능.
//
//    패키지 스코프
//    - public => 어떤 패키지에서도 접근 가능
//    - internal => 같은 모듈 내에서만 접근 가능
//    - private => 같은 파일 내에서만 접근 가능
//    - protected => """패키지 스코프에서는 사용하지 않음"""
//
//    클래스 스코프
//    - public(기본값, 생략) => 클래스 외부에서 늘 접근 가능
//    - internal => """클래스 스코프에서 사용하지 않음"""
//    - private => 클래스 내부에서만 접근 가능
//    - protected => 클래스 자신과 상속받은 클래스에서 접근 가능.
//
//
// */
